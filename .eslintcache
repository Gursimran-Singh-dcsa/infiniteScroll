[{"/home/gursimran/infinitescroll/src/Components/RegistrationTemplate.js":"1","/home/gursimran/infinitescroll/src/data.js":"2","/home/gursimran/infinitescroll/src/Components/Homepage.js":"3"},{"size":6363,"mtime":1608479055759,"results":"4","hashOfConfig":"5"},{"size":854,"mtime":1608478380681,"results":"6","hashOfConfig":"5"},{"size":800,"mtime":1608479142662,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1yxw348",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gursimran/infinitescroll/src/Components/RegistrationTemplate.js",["15","16","17","18","19"],"import {useDispatch} from 'react-redux';\nimport {useState} from 'react';\nimport {userInputFields} from '../data';\n\nconst RegistrationTemplate = () => {\n  const [userData, setUserData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    dob: '',\n    image: '',\n    accepted: false,\n  });\n\n  const [errors, setError] = useState({\n    name: false,\n    email: false,\n    dob: false,\n    image: false,\n    accepted: false\n  });\n\n  const [errorMessages, setErrorMessages] = useState({\n    name: '',\n    email: '',\n    dob: '',\n    image: '',\n    accepted: ''\n  })\n\n  const dispatch = useDispatch();\n\n  const checkField = (e) => {\n    const type = e.target.name;\n    const value = (e.target.value).trim();\n    const isValid = validate({type: type, value: value})\n    setError({...errors, [e.target.name]: !isValid})\n  }\n\n  const setUserState = (e) => {\n    switch (e.target.name) {\n      case 'name':\n      case 'email':\n      case 'dob':\n      case 'password':\n      case 'confirmPassword':\n        setUserData({...userData, [e.target.name]: e.target.value})\n        break;\n      case 'accepted':\n        setUserData({...userData, [e.target.name]: !userData[e.target.name]});\n      default:\n        break;\n    }\n  }\n\nconst validate = ({type, value}) => {\n    switch (type) {\n      case 'dob':\n        const inputDate = new Date(value);\n        const today = new Date();\n        const minDate = new Date('01-01-1900');\n        if (\"\" == value || inputDate > today || inputDate < minDate) {\n          setErrorMessages({...errorMessages, [type]: 'please choose a valid date between 01/01/1900 & today'});\n          return false;\n        }\n        setErrorMessages({...errorMessages, [type]: ''});\n        return true;\n      case 'name':\n        if (null == value) {\n          setErrorMessages({...errorMessages, [type]: 'name cannot be empty'});\n          return false;\n        }\n        if (3 > value.length) {\n          setErrorMessages({...errorMessages, [type]: 'name must be larger than 3 chars'});\n          return false;\n        }\n        if (15 < value.length) {\n          setErrorMessages({...errorMessages, [type]: 'name must be less than 15 chars'})\n          return false;\n        }\n        if (!(/^[A-Za-z\\s]+$/.test(value))) {\n          setErrorMessages({...errorMessages, [type]: 'Please enter a valid name'});\n          return false;\n        }\n        return true;\n      case 'email':\n        if (!(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/).test(value)) {\n          setErrorMessages({...errorMessages, [type]: 'please Enter a valid email address'});\n          return false;\n        }\n        return true;\n      case 'accepted':\n        setError({...errors, [type]: value})\n        if (!value) {\n          setErrorMessages({...errorMessages, [type]: 'please accept Terms and Conditions'});\n          return false;\n        }\n        return true;\n      case 'password':\n        if (null == value) {\n          setErrorMessages({...errorMessages, [type]: 'password cannot be empty'});\n          return false;\n        }\n        if (3 > value.length) {\n          setErrorMessages({...errorMessages, [type]: 'password must be larger than 3 chars'});\n          return false;\n        }\n        if (15 < value.length) {\n          setErrorMessages({...errorMessages, [type]: 'password must be less than 15 chars'})\n          return false;\n        }\n        if (value.includes(\" \")) {\n          setErrorMessages({...errorMessages, [type]: 'password must not contain space'})\n          return false;\n        }\n        return true;\n        case 'confirmPassword':\n          if (value != userData.password) {\n            setErrorMessages({...errorMessages, [type]: 'passwords must be equal'})\n            return false;\n          }\n          return true;\n    }\n    return true;\n  }\n\n  const submitData = () => {\n    let isFormValid = true;\n    userInputFields.forEach(userInputField => {\n      isFormValid = isFormValid && validate({type:userInputField.name, value: userData[userInputField.name]});\n    });\n    if (!isFormValid) {\n      console.log('there is some error bro');\n    } else {\n      dispatch({type: 'registerUser', value: userData});\n    }\n  }\n\n  return (\n    <div className=\"userProfileForm\">\n      {\n        userInputFields.map((userInputField) => {\n          if ('date' === userInputField.type) {\n            return(\n              <div className=\"input\" key={userInputField.name}>\n                <div className=\"placeholder\">{userInputField.placeHolder}</div>\n                <div className=\"input\">\n                  <input type={userInputField.type} name={userInputField.name} min={userInputField.min} max={userInputField.max} value={userData.[userInputField.name]} onChange={setUserState} onBlur={checkField} ></input>\n                </div>\n                <div className=\"errors\"><span>{errors[userInputField.name] ? errorMessages[userInputField.name] : ''}</span></div>\n              </div>\n            )\n          } else if ('checkbox' == userInputField.type) {\n            return (\n              <div className=\"input\" key={userInputField.name}>\n                <div className=\"placeholder\">{userInputField.placeHolder}</div>\n                <div className=\"input\">\n                  <input className=\"checkbox\" type={userInputField.type} name={userInputField.name} defaultChecked={userData[userInputField.name]} onChange={setUserState} ></input>\n                </div>\n                <div className=\"errors\"><span>{errors[userInputField.name] ? errorMessages[userInputField.name] : ''}</span></div>\n              </div>\n            )\n          } else {\n            return (\n              <div className=\"input\" key={userInputField.name}>\n                <div className=\"placeholder\"><span>{userInputField.placeHolder}</span></div>\n                <div className=\"input\"><input type={userInputField.type} placeholder={userInputField.placeHolder} name={userInputField.name} value={userData.[userInputField.name]} onChange={setUserState} onBlur={checkField}></input></div>\n                <div className=\"errors\"><span>{errors[userInputField.name] ? errorMessages[userInputField.name] : ''}</span></div>\n              </div>\n            )\n          }\n        })\n      }\n      <input type=\"submit\" onClick={submitData}></input>\n    </div>\n  )\n}\n\nexport default RegistrationTemplate;\n","/home/gursimran/infinitescroll/src/data.js",[],"/home/gursimran/infinitescroll/src/Components/Homepage.js",[],{"ruleId":"20","severity":1,"message":"21","line":52,"column":7,"nodeType":"22","messageId":"23","endLine":53,"endColumn":15},{"ruleId":"24","severity":1,"message":"25","line":58,"column":5,"nodeType":"26","messageId":"27","endLine":124,"endColumn":6},{"ruleId":"28","severity":1,"message":"29","line":63,"column":16,"nodeType":"30","messageId":"31","endLine":63,"endColumn":18},{"ruleId":"28","severity":1,"message":"32","line":119,"column":21,"nodeType":"30","messageId":"31","endLine":119,"endColumn":23},{"ruleId":"28","severity":1,"message":"29","line":154,"column":33,"nodeType":"30","messageId":"31","endLine":154,"endColumn":35},"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='."]