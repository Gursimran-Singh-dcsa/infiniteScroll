[{"/home/gursimran/infinitescroll/src/reportWebVitals.js":"1","/home/gursimran/infinitescroll/src/Components/AddImages.js":"2","/home/gursimran/infinitescroll/src/index.js":"3","/home/gursimran/infinitescroll/src/Components/Homepage.js":"4","/home/gursimran/infinitescroll/src/Components/NavBar.js":"5","/home/gursimran/infinitescroll/src/Reducer/state.js":"6","/home/gursimran/infinitescroll/src/Functions/common.js":"7","/home/gursimran/infinitescroll/src/Components/loginTemplate.js":"8","/home/gursimran/infinitescroll/src/data.js":"9"},{"size":362,"mtime":1606311806644,"results":"10","hashOfConfig":"11"},{"size":123,"mtime":1606584469048,"results":"12","hashOfConfig":"11"},{"size":742,"mtime":1607447788094,"results":"13","hashOfConfig":"11"},{"size":729,"mtime":1608224207261,"results":"14","hashOfConfig":"11"},{"size":539,"mtime":1607447991127,"results":"15","hashOfConfig":"11"},{"size":474,"mtime":1608223783337,"results":"16","hashOfConfig":"11"},{"size":66,"mtime":1608221973503,"results":"17","hashOfConfig":"11"},{"size":5314,"mtime":1608223382268,"results":"18","hashOfConfig":"11"},{"size":635,"mtime":1608218974943,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yxw348",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gursimran/infinitescroll/src/reportWebVitals.js",[],"/home/gursimran/infinitescroll/src/Components/AddImages.js",[],["42","43"],"/home/gursimran/infinitescroll/src/index.js",[],["44","45"],"/home/gursimran/infinitescroll/src/Components/Homepage.js",[],"/home/gursimran/infinitescroll/src/Components/NavBar.js",[],["46","47"],"/home/gursimran/infinitescroll/src/Reducer/state.js",[],"/home/gursimran/infinitescroll/src/Functions/common.js",[],"/home/gursimran/infinitescroll/src/Components/loginTemplate.js",["48","49","50","51"],"import {useDispatch} from 'react-redux';\nimport {useState} from 'react';\nimport {userInputFields} from '../data';\n\nconst LoginTemplate = () => {\n  const [userData, setUserData] = useState({\n    name: '',\n    email: '',\n    dob: '',\n    image: '',\n    accepted: false,\n  });\n\n  const [errors, setError] = useState({\n    name: false,\n    email: false,\n    dob: false,\n    image: false,\n    accepted: false\n  });\n\n  const [errorMessages, setErrorMessages] = useState({\n    name: '',\n    email: '',\n    dob: '',\n    image: '',\n    accepted: ''\n  })\n\n  const dispatch = useDispatch();\n\n  const checkField = (e) => {\n    const type = e.target.name;\n    const value = (e.target.value).trim();\n    const isValid = validate({type: type, value: value})\n    setError({...errors, [e.target.name]: !isValid})\n  }\n\n  const setUserState = (e) => {\n    switch (e.target.name) {\n      case 'name':\n      case 'email':\n      case 'dob':\n        setUserData({...userData, [e.target.name]: e.target.value})\n        break;\n      case 'accepted':\n        setUserData({...userData, [e.target.name]: !userData[e.target.name]});\n      default:\n        break;\n    }\n  }\n\nconst validate = ({type, value}) => {\n    switch (type) {\n      case 'dob':\n        const inputDate = new Date(value);\n        const today = new Date();\n        const minDate = new Date('01-01-1900');\n        if (\"\" == value || inputDate > today || inputDate < minDate) {\n          setErrorMessages({...errorMessages, [type]: 'please choose a valid date between 01/01/1900 & today'});\n          return false;\n        }\n        setErrorMessages({...errorMessages, [type]: ''});\n        return true;\n      case 'name':\n        if (null == value) {\n          setErrorMessages({...errorMessages, [type]: 'name cannot be empty'});\n          return false;\n        }\n        if (3 > value.length) {\n          setErrorMessages({...errorMessages, [type]: 'name must be larger than 3 chars'});\n          return false;\n        }\n        if (15 < value.length) {\n          setErrorMessages({...errorMessages, [type]: 'name must be less than 15 chars'})\n          return false;\n        }\n        if (!(/^[A-Za-z\\s]+$/.test(value))) {\n          setErrorMessages({...errorMessages, [type]: 'Please enter a valid name'})\n          return false;\n        }\n        return true;\n      case 'email':\n        if (!(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/).test(value)) {\n          setErrorMessages({...errorMessages, [type]: 'please Enter a valid email address'});\n          return false;\n        }\n        return true;\n      case 'accepted': \n        if (!value) {\n          setErrorMessages({...errorMessages, [type]: 'please accept Terms and Conditions'});\n          return false;\n        }\n        return true;\n    }\n    return true;\n  }\n\n  const submitData = () => {\n    let isFormValid = true;\n    userInputFields.forEach(userInputField => {\n      isFormValid = isFormValid && validate({type:userInputField.name, value: userData[userInputField.name]});\n    });\n    if (!isFormValid) {\n      console.log('there is some error bro');\n    } else {\n      dispatch({type: 'registerUser', value: userData});\n    }\n  }\n\n  return (\n    <div className=\"userProfileForm\">\n      {\n        userInputFields.map((userInputField) => {\n          if ('date' === userInputField.type) {\n            return(\n              <div className=\"input\" key={userInputField.name}>\n                <div className=\"placeholder\">{userInputField.placeHolder}</div>\n                <div className=\"input\">\n                  <input type={userInputField.type} name={userInputField.name} min={userInputField.min} max={userInputField.max} value={userData.[userInputField.name]} onChange={setUserState} onBlur={checkField} ></input>\n                </div>\n                <div className=\"errors\"><span>{errors[userInputField.name] ? errorMessages[userInputField.name] : ''}</span></div>\n              </div>\n            )\n          } else if ('checkbox' == userInputField.type) {\n            return (\n              <div className=\"input\" key={userInputField.name}>\n                <div className=\"placeholder\">{userInputField.placeHolder}</div>\n                <div className=\"input\">\n                  <input className=\"checkbox\" type={userInputField.type} name={userInputField.name} defaultChecked={userData[userInputField.name]} onChange={setUserState} ></input>\n                </div>\n                <div className=\"errors\"><span>{errors[userInputField.name] ? errorMessages[userInputField.name] : ''}</span></div>\n              </div>\n            )\n          } else {\n            return (\n              <div className=\"input\" key={userInputField.name}>\n                <div className=\"placeholder\"><span>{userInputField.placeHolder}</span></div>\n                <div className=\"input\"><input type={userInputField.type} placeholder={userInputField.placeHolder} name={userInputField.name} value={userData.[userInputField.name]} onChange={setUserState} onBlur={checkField}></input></div>\n                <div className=\"errors\"><span>{errors[userInputField.name] ? errorMessages[userInputField.name] : ''}</span></div>\n              </div>\n            )\n          }\n        })\n      }\n      <input type=\"submit\" onClick={submitData}></input>\n    </div>\n  )\n}\n\nexport default LoginTemplate;\n","/home/gursimran/infinitescroll/src/data.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"52","replacedBy":"56"},{"ruleId":"54","replacedBy":"57"},{"ruleId":"52","replacedBy":"58"},{"ruleId":"54","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":48,"column":7,"nodeType":"62","messageId":"63","endLine":49,"endColumn":15},{"ruleId":"64","severity":1,"message":"65","line":54,"column":5,"nodeType":"66","messageId":"67","endLine":95,"endColumn":6},{"ruleId":"68","severity":1,"message":"69","line":59,"column":16,"nodeType":"70","messageId":"71","endLine":59,"endColumn":18},{"ruleId":"68","severity":1,"message":"69","line":125,"column":33,"nodeType":"70","messageId":"71","endLine":125,"endColumn":35},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],["72"],["73"],["72"],["73"],"no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]